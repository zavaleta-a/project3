{"version":3,"sources":["utils/helpers.js","utils/actions.js","components/PartsItem/index.js","utils/queries.js","assets/spinner.gif","components/PartsList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","utils/mutations.js","pages/Login.js","pages/Info.js","pages/Signup.js","components/Nav/index.js","pages/OrderHistory.js","utils/reducers.js","utils/store.js","App.js","serviceWorker.js","index.js"],"names":["pluralize","name","count","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","UPDATE_PARTS","ADD_TO_CART","ADD_MULTIPLE_TO_CART","REMOVE_FROM_CART","CLEAR_CART","UPDATE_CART_QUANTITY","TOGGLE_CART","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","PartsItem","item","dispatch","useDispatch","state","useSelector","image","price","quantity","cart","className","to","alt","src","onClick","itemInCart","find","cartItem","type","purchaseQuantity","parseInt","parts","QUERY_PARTS","gql","QUERY_CHECKOUT","QUERY_CATEGORIES","QUERY_USER","PartsList","currentCategory","useQuery","loading","data","useEffect","forEach","part","then","length","filter","category","map","spinner","CategoryMenu","categories","categoryData","id","CartItem","placeholder","value","onChange","target","role","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","res","redirectToCheckout","sessionId","checkout","session","a","getCart","cartOpen","sum","toFixed","calculateTotal","Auth","loggedIn","partIds","i","push","variables","Home","LOGIN","ADD_USER","Login","props","useState","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Info","useParams","currentPart","setCurrentPart","indexedParts","description","disabled","p","Signup","addUser","firstName","lastName","Nav","href","logout","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","initialState","reducer","action","newState","createStore","client","ApolloClient","operation","setContext","headers","authorization","uri","App","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.251281c9.chunk.js","sourcesContent":["export function pluralize(name, count) {\n    if (count === 1) {\n      return name;\n    }\n    return name + 's';\n  }\n  \n  export function idbPromise(storeName, method, object) {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open('parts-r-us', 1);\n      let db, tx, store;\n      request.onupgradeneeded = function(e) {\n        const db = request.result;\n        db.createObjectStore('parts', { keyPath: '_id' });\n        db.createObjectStore('categories', { keyPath: '_id' });\n        db.createObjectStore('cart', { keyPath: '_id' });\n      };\n  \n      request.onerror = function(e) {\n        console.log('There was an error');\n      };\n  \n      request.onsuccess = function(e) {\n        db = request.result;\n        tx = db.transaction(storeName, 'readwrite');\n        store = tx.objectStore(storeName);\n  \n        db.onerror = function(e) {\n          console.log('error', e);\n        };\n  \n        switch (method) {\n          case 'put':\n            store.put(object);\n            resolve(object);\n            break;\n          case 'get':\n            const all = store.getAll();\n            all.onsuccess = function() {\n              resolve(all.result);\n            };\n            break;\n          case 'delete':\n            store.delete(object._id);\n            break;\n          default:\n            console.log('No valid method');\n            break;\n        }\n  \n        tx.oncomplete = function() {\n          db.close();\n        };\n      };\n    });\n  }\n  ","export const UPDATE_PARTS = \"UPDATE_PARTS\";\n\nexport const ADD_TO_CART = \"ADD_TO_CART\";\nexport const ADD_MULTIPLE_TO_CART = \"ADD_MULTIPLE_TO_CART\";\nexport const REMOVE_FROM_CART = \"REMOVE_FROM_CART\";\nexport const CLEAR_CART = \"CLEAR_CART\";\nexport const UPDATE_CART_QUANTITY = \"UPDATE_CART_QUANTITY\";\nexport const TOGGLE_CART = \"TOGGLE_CART\";\n\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\"\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\n\nfunction PartsItem(item) {\n    const dispatch = useDispatch();\n    const state = useSelector(state => state);\n  \n    const {\n      image,\n      name,\n      _id,\n      price,\n      quantity\n    } = item;\n  \n    const { cart } = state\n  \n    const addToCart = () => {\n      const itemInCart = cart.find((cartItem) => cartItem._id === _id)\n      if (itemInCart) {\n        dispatch({\n          type: UPDATE_CART_QUANTITY,\n          _id: _id,\n          purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n        });\n        idbPromise('cart', 'put', {\n          ...itemInCart,\n          purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n        });\n      } else {\n        dispatch({\n          type: ADD_TO_CART,\n          parts: { ...item, purchaseQuantity: 1 }\n        });\n        idbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\n      }\n    }\n  \n    return (\n      <div className=\"card px-1 py-1\">\n        <Link to={`/parts/${_id}`}>\n          <img\n            alt={name}\n            src={`/images/${image}`}\n          />\n          <p>{name}</p>\n        </Link>\n        <div>\n          <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\n          <span>${price}</span>\n        </div>\n        <button onClick={addToCart}>Add to cart</button>\n      </div>\n    );\n  }\n  \n  export default PartsItem;","import { gql } from 'graphql-tag';\n\nexport const QUERY_PARTS = gql`\n  query getParts($category: ID) {\n    parts(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($parts: [ID]!) {\n    checkout(parts: $parts) {\n      session\n    }\n  }\n`;\n\nexport const QUERY_ALL_PARTS = gql`\n  {\n    parts {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n  {\n    categories {\n      _id\n      name\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  {\n    user {\n      firstName\n      lastName\n      orders {\n        _id\n        purchaseDate\n        parts {\n          _id\n          name\n          description\n          price\n          quantity\n          image\n        }\n      }\n    }\n  }\n`;\n","export default __webpack_public_path__ + \"static/media/spinner.689d9a07.gif\";","import React, { useEffect } from 'react';\nimport PartsItem from \"../PartsItem\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { UPDATE_PARTS} from '../../utils/actions';\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_PARTS } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\nimport spinner from '../../assets/spinner.gif';\n\nfunction PartsList() {\n  const dispatch = useDispatch();\n  const state = useSelector(state => state);\n\n  const { currentCategory } = state;\n\n  const { loading, data } = useQuery(QUERY_PARTS);\n\n  useEffect(() => {\n    if (data) {\n      dispatch({\n        type: UPDATE_PARTS,\n        parts: data.parts,\n      });\n      data.parts.forEach((part) => {\n        idbPromise('parts', 'put', part);\n      });\n    } else if (!loading) {\n      idbPromise('parts', 'get').then((parts) => {\n        dispatch({\n          type: UPDATE_PARTS,\n          parts: parts,\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterParts() {\n    if (!currentCategory) {\n      return state.parts;\n    }\n\n    return state.parts.filter(\n      (parts) => parts.category._id === currentCategory\n    );\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Parts:</h2>\n      {state.parts.length ? (\n        <div className=\"flex-row\">\n          {filterParts().map((parts) => (\n            <PartsItem\n              key={parts._id}\n              _id={parts._id}\n              image={parts.image}\n              name={parts.name}\n              price={parts.price}\n              quantity={parts.quantity}\n            />\n          ))}s\n        </div>\n      ) : (\n        <h3>You haven't added any parts yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nexport default PartsList;\n","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\n// import { useStoreContext } from '../../utils/GlobalState';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n} from '../../utils/actions';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\n\nfunction CategoryMenu() {\n  const dispatch = useDispatch();\n  const state = useSelector(state => state);\n\n  const { categories } = state;\n\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories,\n      });\n      categoryData.categories.forEach((category) => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then((categories) => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories,\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = (id) => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id,\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map((item) => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\n\nconst CartItem = ({ item }) => {\n\n  const dispatch = useDispatch();\n\n  const removeFromCart = item => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: item._id\n    });\n    idbPromise('cart', 'delete', { ...item });\n\n  };\n\n  const onChange = (e) => {\n    const value = e.target.value;\n    if (value === '0') {\n      dispatch({\n        type: REMOVE_FROM_CART,\n        _id: item._id\n      });\n      idbPromise('cart', 'delete', { ...item });\n\n    } else {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: item._id,\n        purchaseQuantity: parseInt(value)\n      });\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\n\n    }\n  }\n\n  return (\n    <div className=\"flex-row\">\n      <div>\n        <img\n          src={`/images/${item.image}`}\n          alt=\"\"\n        />\n      </div>\n      <div>\n        <div>{item.name}, ${item.price}</div>\n        <div>\n          <span>Qty:</span>\n          <input\n            type=\"number\"\n            placeholder=\"1\"\n            value={item.purchaseQuantity}\n            onChange={onChange}\n          />\n          <span\n            role=\"img\"\n            aria-label=\"trash\"\n            onClick={() => removeFromCart(item)}\n          >\n            🗑️\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CartItem;","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useEffect } from 'react';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useLazyQuery } from '@apollo/react-hooks';\nimport { QUERY_CHECKOUT } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\nimport CartItem from '../CartItem';\nimport Auth from '../../utils/auth';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from '../../utils/actions';\nimport './style.css';\n\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\nconst Cart = () => {\n  const dispatch = useDispatch();\n  const state = useSelector(state => state)\n  const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n  useEffect(() => {\n    if (data) {\n      stripePromise.then((res) => {\n        res.redirectToCheckout({ sessionId: data.checkout.session });\n      });\n    }\n  }, [data]);\n\n  useEffect(() => {\n    async function getCart() {\n      const cart = await idbPromise('cart', 'get');\n      dispatch({ type: ADD_MULTIPLE_TO_CART, parts: [...cart] });\n    }\n\n    if (!state.cart.length) {\n      getCart();\n    }\n  }, [state.cart.length, dispatch]);\n\n  function toggleCart() {\n    dispatch({ type: TOGGLE_CART });\n  }\n\n  function calculateTotal() {\n    let sum = 0;\n    state.cart.forEach((item) => {\n      sum += item.price * item.purchaseQuantity;\n    });\n    return sum.toFixed(2);\n  }\n\n  function submitCheckout() {\n    const partIds = [];\n\n    state.cart.forEach((item) => {\n      for (let i = 0; i < item.purchaseQuantity; i++) {\n        partIds.push(item._id);\n      }\n    });\n\n    getCheckout({\n      variables: { parts: partIds },\n    });\n  }\n\n  if (!state.cartOpen) {\n    return (\n      <div className=\"cart-closed\" onClick={toggleCart}>\n        <span role=\"img\" aria-label=\"trash\">\n          🛒\n        </span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"cart\">\n      <div className=\"close\" onClick={toggleCart}>\n        [close]\n      </div>\n      <h2>Shopping Cart</h2>\n      {state.cart.length ? (\n        <div>\n          {state.cart.map((item) => (\n            <CartItem key={item._id} item={item} />\n          ))}\n\n          <div className=\"flex-row space-between\">\n            <strong>Total: ${calculateTotal()}</strong>\n\n            {Auth.loggedIn() ? (\n              <button onClick={submitCheckout}>Checkout</button>\n            ) : (\n              <span>(log in to check out)</span>\n            )}\n          </div>\n        </div>\n      ) : (\n        <h3>\n          You haven't added anything to your cart yet!\n        </h3>\n      )}\n    </div>\n  );\n};\n\nexport default Cart;\n","import React from \"react\";\nimport PartsList from \"../components/PartsList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from \"../components/Cart\";\n\nconst Home = () => {\n  return (\n    <div className=\"splash-container\">\n      <CategoryMenu />\n      <PartsList />\n      <Cart />\n    </div>\n  );\n};\n\nexport default Home;\n","import { gql } from \"graphql-tag\";\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($parts: [ID]!) {\n    addOrder(prarts: $parts) {\n      purchaseDate\n      ts {\n        _id\n        name\n        description\n        price\n        quantity\n        category {\n          name\n        }\n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"l-box-lrg pure-u-1 pure-u-md-3-5\">\n      <Link to=\"/signup\">← Go to Signup</Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"pure-form pure-form-stacked\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\" className=\"pure-button\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/react-hooks';\n\nimport Cart from '../components/Cart';\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PARTS,\n} from '../utils/actions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { QUERY_PARTS} from '../utils/queries';\nimport { idbPromise } from '../utils/helpers';\nimport spinner from '../assets/spinner.gif';\n\nfunction Info() {\n  const state = useSelector(state => state);\n  const dispatch = useDispatch();\n  const { id } = useParams();\n\n  const [currentPart, setCurrentPart] = useState({});\n\n  const { loading, data } = useQuery(QUERY_PARTS);\n\n  const { parts, cart } = state;\n\n  useEffect(() => {\n    // already in global store\n    if (parts.length) {\n      setCurrentPart(parts.find((part) => part._id === id));\n    }\n    // retrieved from server\n    else if (data) {\n      dispatch({\n        type: UPDATE_PARTS,\n        parts: data.parts,\n      });\n\n      data.parts.forEach((part) => {\n        idbPromise('parts', 'put', part);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('parts', 'get').then((indexedParts) => {\n        dispatch({\n          type: UPDATE_PARTS,\n          parts: indexedParts,\n        });\n      });\n    }\n  }, [parts, data, loading, dispatch, id]);\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id);\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        part: { ...currentPart, purchaseQuantity: 1 },\n      });\n      idbPromise('cart', 'put', { ...currentPart, purchaseQuantity: 1 });\n    }\n  };\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentPart._id,\n    });\n\n    idbPromise('cart', 'delete', { ...currentPart });\n  };\n\n  return (\n    <>\n      {currentPart && cart ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">← Back to Parts</Link>\n\n          <h2>{currentPart.name}</h2>\n\n          <p>{currentPart.description}</p>\n\n          <p>\n            <strong>Price:</strong>${currentPart.price}{' '}\n            <button onClick={addToCart}>Add to Cart</button>\n            <button\n              disabled={!cart.find((p) => p._id === currentPart._id)}\n              onClick={removeFromCart}\n            >\n              Remove from Cart\n            </button>\n          </p>\n\n          <img\n            src={`/images/${currentPart.image}`}\n            alt={currentPart.name}\n          />\n        </div>\n      ) : null}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n      <Cart />\n    </>\n  );\n}\n\nexport default Info;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/react-hooks';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        firstName: formState.firstName,\n        lastName: formState.lastName,\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"l-box-lrg pure-u-1 pure-u-md-3-5\">\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"pure-form pure-form-stacked\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"pure-form pure-form-stacked\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"pure-form pure-form-stacked\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"pure-form pure-form-stacked\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"pure-form pure-form-stacked\">\n          <button type=\"submit\" className=\"pure-button\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Signup;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Browsing History \n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          Parts R Us\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_USER } from '../utils/queries';\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">← Back to Parts</Link>\n\n        {user ? (\n          <>\n            <h2>\n              Order History for {user.firstName} {user.lastName}\n            </h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\n                </h3>\n                <div className=\"flex-row\">\n                  {order.parts.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/ts/${_id}`}>\n                        <img alt={name} src={`/images/${image}`} />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default OrderHistory;\n","import {\n    UPDATE_PARTS,\n    ADD_TO_CART,\n    UPDATE_CART_QUANTITY,\n    REMOVE_FROM_CART,\n    ADD_MULTIPLE_TO_CART,\n    UPDATE_CATEGORIES,\n    UPDATE_CURRENT_CATEGORY,\n    CLEAR_CART,\n    TOGGLE_CART,\n  } from './actions';\n  \n  const initialState = {\n    parts: [],\n    cart: [],\n    cartOpen: false,\n    categories: [],\n    currentCategory: \"\",\n  };\n  // The reducer is a function that accepts the current state and an action. It returns a new state based on that action.\n  export const reducer = (state = initialState, action) => {\n    switch (action.type) {\n      // Returns a copy of state with an update ts array. We use the action.ts property and spread it's contents into the new array.\n      case UPDATE_PARTS:\n        return {\n          ...state,\n          parts: [...action.parts],\n        };\n  \n      case ADD_TO_CART:\n        return {\n          ...state,\n          cartOpen: true,\n          cart: [...state.cart, action.part],\n        };\n      case ADD_MULTIPLE_TO_CART:\n        return {\n          ...state,\n          cart: [...state.cart, ...action.parts],\n        };\n      // Returns a copy of state, sets the cartOpen to true and maps through the items in the cart.\n      // If the item's `id` matches the `id` that was provided in the action.payload, we update the purchase quantity.\n      case UPDATE_CART_QUANTITY:\n        return {\n          ...state,\n          cartOpen: true,\n          cart: state.cart.map((part) => {\n            if (action._id === part._id) {\n              part.purchaseQuantity = action.purchaseQuantity;\n            }\n            return part;\n          }),\n        };\n  \n      // First we iterate through each item in the cart and check to see if the `t._id` matches the `action._id`\n      // If so, we remove it from our cart and set the updated state to a variable called `newState`\n      case REMOVE_FROM_CART:\n        let newState = state.cart.filter((part) => {\n          return part._id !== action._id;\n        });\n  \n        // Then we return a copy of state and check to see if the cart is empty.\n        // If not, we set the cartOpen status to  `true`. Then we return an updated cart array set to the value of `newState`.\n        return {\n          ...state,\n          cartOpen: newState.length > 0,\n          cart: newState,\n        };\n  \n      case CLEAR_CART:\n        return {\n          ...state,\n          cartOpen: false,\n          cart: [],\n        };\n  \n      case TOGGLE_CART:\n        return {\n          ...state,\n          cartOpen: !state.cartOpen,\n        };\n  \n      case UPDATE_CATEGORIES:\n        return {\n          ...state,\n          categories: [...action.categories],\n        };\n  \n      case UPDATE_CURRENT_CATEGORY:\n        return {\n          ...state,\n          currentCategory: action.currentCategory,\n        };\n  \n      // Return the state as is in the event that the `action.type` passed to our reducer was not accounted for by the developers\n      // This saves us from a crash.\n      default:\n        return state;\n    }\n  };\n  \n  export default reducer;\n  ","import { createStore } from 'redux';\nimport reducer from './reducers';\n\nexport default createStore(reducer);","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport ApolloClient from \"apollo-boost\";\n\nimport Home from \"./pages/Home\";\nimport Login from \"./pages/Login\";\nimport Info from \"./pages/Info\";\nimport Signup from \"./pages/Signup\";\nimport Nav from \"./components/Nav\";\nimport OrderHistory from \"./pages/OrderHistory\";\n\nimport store from \"./utils/store\";\nimport { Provider } from \"react-redux\";\n\nconst client = new ApolloClient({\n  request: (operation) => {\n    const token = localStorage.getItem(\"id_token\");\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : \"\",\n      },\n    });\n  },\n  uri: \"/graphql\",\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <Provider store={store}>\n            <Nav />\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\n              <Route exact path=\"/parts/:id\" component={Info} />\n            </Switch>\n          </Provider>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nserviceWorker.register();\n"],"sourceRoot":""}