{"version":3,"sources":["utils/helpers.js","utils/actions.js","components/PartsItem/index.js","utils/queries.js","assets/spinner.gif","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","utils/mutations.js","pages/Login.js","pages/Info.js","pages/Signup.js","components/Nav/index.js","pages/OrderHistory.js","utils/reducers.js","utils/store.js","App.js","serviceWorker.js","index.js"],"names":["idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","UPDATE_PARTS","ADD_TO_CART","ADD_MULTIPLE_TO_CART","REMOVE_FROM_CART","CLEAR_CART","UPDATE_CART_QUANTITY","TOGGLE_CART","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","PartsItem","QUERY_PARTS","gql","QUERY_CHECKOUT","QUERY_CATEGORIES","QUERY_USER","CategoryMenu","dispatch","useDispatch","categories","useSelector","state","useQuery","loading","categoryData","data","useEffect","type","forEach","category","then","map","item","onClick","id","currentCategory","name","CartItem","className","src","image","alt","price","placeholder","value","purchaseQuantity","onChange","target","parseInt","role","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","res","redirectToCheckout","sessionId","checkout","session","a","cart","parts","length","getCart","cartOpen","sum","toFixed","calculateTotal","Auth","loggedIn","partIds","i","push","variables","Home","LOGIN","ADD_USER","Login","props","useState","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","to","onSubmit","htmlFor","Info","useParams","currentPart","setCurrentPart","find","part","indexedParts","description","itemInCart","cartItem","disabled","p","spinner","Signup","addUser","firstName","lastName","Nav","href","logout","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","initialState","reducer","action","newState","filter","createStore","client","ApolloClient","operation","setContext","headers","authorization","uri","App","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.aa0da5bd.chunk.js","sourcesContent":["export function pluralize(name, count) {\r\n    if (count === 1) {\r\n      return name;\r\n    }\r\n    return name + 's';\r\n  }\r\n  \r\n  export function idbPromise(storeName, method, object) {\r\n    return new Promise((resolve, reject) => {\r\n      const request = window.indexedDB.open('parts-r-us', 1);\r\n      let db, tx, store;\r\n      request.onupgradeneeded = function(e) {\r\n        const db = request.result;\r\n        db.createObjectStore('parts', { keyPath: '_id' });\r\n        db.createObjectStore('categories', { keyPath: '_id' });\r\n        db.createObjectStore('cart', { keyPath: '_id' });\r\n      };\r\n  \r\n      request.onerror = function(e) {\r\n        console.log('There was an error');\r\n      };\r\n  \r\n      request.onsuccess = function(e) {\r\n        db = request.result;\r\n        tx = db.transaction(storeName, 'readwrite');\r\n        store = tx.objectStore(storeName);\r\n  \r\n        db.onerror = function(e) {\r\n          console.log('error', e);\r\n        };\r\n  \r\n        switch (method) {\r\n          case 'put':\r\n            store.put(object);\r\n            resolve(object);\r\n            break;\r\n          case 'get':\r\n            const all = store.getAll();\r\n            all.onsuccess = function() {\r\n              resolve(all.result);\r\n            };\r\n            break;\r\n          case 'delete':\r\n            store.delete(object._id);\r\n            break;\r\n          default:\r\n            console.log('No valid method');\r\n            break;\r\n        }\r\n  \r\n        tx.oncomplete = function() {\r\n          db.close();\r\n        };\r\n      };\r\n    });\r\n  }\r\n  ","export const UPDATE_PARTS = \"UPDATE_PARTS\";\r\n\r\nexport const ADD_TO_CART = \"ADD_TO_CART\";\r\nexport const ADD_MULTIPLE_TO_CART = \"ADD_MULTIPLE_TO_CART\";\r\nexport const REMOVE_FROM_CART = \"REMOVE_FROM_CART\";\r\nexport const CLEAR_CART = \"CLEAR_CART\";\r\nexport const UPDATE_CART_QUANTITY = \"UPDATE_CART_QUANTITY\";\r\nexport const TOGGLE_CART = \"TOGGLE_CART\";\r\n\r\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\r\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { pluralize } from \"../../utils/helpers\"\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\r\nimport { idbPromise } from \"../../utils/helpers\";\r\n\r\nfunction PartsItem(item) {\r\n    const dispatch = useDispatch();\r\n    const state = useSelector(state => state);\r\n  \r\n    const {\r\n      image,\r\n      name,\r\n      _id,\r\n      price,\r\n      quantity\r\n    } = item;\r\n  \r\n    const { cart } = state\r\n  \r\n    const addToCart = () => {\r\n      const itemInCart = cart.find((cartItem) => cartItem._id === _id)\r\n      if (itemInCart) {\r\n        dispatch({\r\n          type: UPDATE_CART_QUANTITY,\r\n          _id: _id,\r\n          purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\r\n        });\r\n        idbPromise('cart', 'put', {\r\n          ...itemInCart,\r\n          purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: ADD_TO_CART,\r\n          parts: { ...item, purchaseQuantity: 1 }\r\n        });\r\n        idbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\r\n      }\r\n    }\r\n  \r\n    return (\r\n      <div className=\"card px-1 py-1\">\r\n        <Link to={`/parts/${_id}`}>\r\n          <img\r\n            alt={name}\r\n            src={`/images/${image}`}\r\n          />\r\n          <p>{name}</p>\r\n        </Link>\r\n        <div>\r\n          <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\r\n          <span>${price}</span>\r\n        </div>\r\n        <button onClick={addToCart}>Add to cart</button>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default PartsItem;","import { gql } from 'graphql-tag';\r\n\r\nexport const QUERY_PARTS = gql`\r\n  query getParts($category: ID) {\r\n    parts(category: $category) {\r\n      _id\r\n      name\r\n      description\r\n      price\r\n      quantity\r\n      image\r\n      category {\r\n        _id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_CHECKOUT = gql`\r\n  query getCheckout($parts: [ID]!) {\r\n    checkout(parts: $parts) {\r\n      session\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_ALL_PARTS = gql`\r\n  {\r\n    parts {\r\n      _id\r\n      name\r\n      description\r\n      price\r\n      quantity\r\n      category {\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_CATEGORIES = gql`\r\n  {\r\n    categories {\r\n      _id\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_USER = gql`\r\n  {\r\n    user {\r\n      firstName\r\n      lastName\r\n      orders {\r\n        _id\r\n        purchaseDate\r\n        parts {\r\n          _id\r\n          name\r\n          description\r\n          price\r\n          quantity\r\n          image\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/spinner.689d9a07.gif\";","import React, { useEffect } from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\n// import { useStoreContext } from '../../utils/GlobalState';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport {\r\n  UPDATE_CATEGORIES,\r\n  UPDATE_CURRENT_CATEGORY,\r\n} from '../../utils/actions';\r\nimport { QUERY_CATEGORIES } from '../../utils/queries';\r\nimport { idbPromise } from '../../utils/helpers';\r\n\r\nfunction CategoryMenu() {\r\n  const dispatch = useDispatch();\r\n  const state = useSelector(state => state);\r\n\r\n  const { categories } = state;\r\n\r\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\r\n\r\n  useEffect(() => {\r\n    if (categoryData) {\r\n      dispatch({\r\n        type: UPDATE_CATEGORIES,\r\n        categories: categoryData.categories,\r\n      });\r\n      categoryData.categories.forEach((category) => {\r\n        idbPromise('categories', 'put', category);\r\n      });\r\n    } else if (!loading) {\r\n      idbPromise('categories', 'get').then((categories) => {\r\n        dispatch({\r\n          type: UPDATE_CATEGORIES,\r\n          categories: categories,\r\n        });\r\n      });\r\n    }\r\n  }, [categoryData, loading, dispatch]);\r\n\r\n  const handleClick = (id) => {\r\n    dispatch({\r\n      type: UPDATE_CURRENT_CATEGORY,\r\n      currentCategory: id,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Choose a Category:</h2>\r\n      {categories.map((item) => (\r\n        <button\r\n          key={item._id}\r\n          onClick={() => {\r\n            handleClick(item._id);\r\n          }}\r\n        >\r\n          {item.name}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CategoryMenu;\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\r\nimport { idbPromise } from \"../../utils/helpers\";\r\n\r\nconst CartItem = ({ item }) => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const removeFromCart = item => {\r\n    dispatch({\r\n      type: REMOVE_FROM_CART,\r\n      _id: item._id\r\n    });\r\n    idbPromise('cart', 'delete', { ...item });\r\n\r\n  };\r\n\r\n  const onChange = (e) => {\r\n    const value = e.target.value;\r\n    if (value === '0') {\r\n      dispatch({\r\n        type: REMOVE_FROM_CART,\r\n        _id: item._id\r\n      });\r\n      idbPromise('cart', 'delete', { ...item });\r\n\r\n    } else {\r\n      dispatch({\r\n        type: UPDATE_CART_QUANTITY,\r\n        _id: item._id,\r\n        purchaseQuantity: parseInt(value)\r\n      });\r\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\r\n\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex-row\">\r\n      <div>\r\n        <img\r\n          src={`/images/${item.image}`}\r\n          alt=\"\"\r\n        />\r\n      </div>\r\n      <div>\r\n        <div>{item.name}, ${item.price}</div>\r\n        <div>\r\n          <span>Qty:</span>\r\n          <input\r\n            type=\"number\"\r\n            placeholder=\"1\"\r\n            value={item.purchaseQuantity}\r\n            onChange={onChange}\r\n          />\r\n          <span\r\n            role=\"img\"\r\n            aria-label=\"trash\"\r\n            onClick={() => removeFromCart(item)}\r\n          >\r\n            🗑️\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CartItem;","import decode from 'jwt-decode';\r\n\r\nclass AuthService {\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n  loggedIn() {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken();\r\n    return !!token && !this.isTokenExpired(token);\r\n  }\r\n\r\n  isTokenExpired(token) {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getToken() {\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem('id_token');\r\n  }\r\n\r\n  login(idToken) {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem('id_token', idToken);\r\n\r\n    window.location.assign('/');\r\n  }\r\n\r\n  logout() {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem('id_token');\r\n    // this will reload the page and reset the state of the application\r\n    window.location.assign('/');\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n","import React, { useEffect } from 'react';\r\nimport { loadStripe } from '@stripe/stripe-js';\r\nimport { useLazyQuery } from '@apollo/react-hooks';\r\nimport { QUERY_CHECKOUT } from '../../utils/queries';\r\nimport { idbPromise } from '../../utils/helpers';\r\nimport CartItem from '../CartItem';\r\nimport Auth from '../../utils/auth';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from '../../utils/actions';\r\nimport './style.css';\r\n\r\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\r\n\r\nconst Cart = () => {\r\n  const dispatch = useDispatch();\r\n  const state = useSelector(state => state)\r\n  const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      stripePromise.then((res) => {\r\n        res.redirectToCheckout({ sessionId: data.checkout.session });\r\n      });\r\n    }\r\n  }, [data]);\r\n\r\n  useEffect(() => {\r\n    async function getCart() {\r\n      const cart = await idbPromise('cart', 'get');\r\n      dispatch({ type: ADD_MULTIPLE_TO_CART, parts: [...cart] });\r\n    }\r\n\r\n    if (!state.cart.length) {\r\n      getCart();\r\n    }\r\n  }, [state.cart.length, dispatch]);\r\n\r\n  function toggleCart() {\r\n    dispatch({ type: TOGGLE_CART });\r\n  }\r\n\r\n  function calculateTotal() {\r\n    let sum = 0;\r\n    state.cart.forEach((item) => {\r\n      sum += item.price * item.purchaseQuantity;\r\n    });\r\n    return sum.toFixed(2);\r\n  }\r\n\r\n  function submitCheckout() {\r\n    const partIds = [];\r\n\r\n    state.cart.forEach((item) => {\r\n      for (let i = 0; i < item.purchaseQuantity; i++) {\r\n        partIds.push(item._id);\r\n      }\r\n    });\r\n\r\n    getCheckout({\r\n      variables: { parts: partIds },\r\n    });\r\n  }\r\n\r\n  if (!state.cartOpen) {\r\n    return (\r\n      <div className=\"cart-closed\" onClick={toggleCart}>\r\n        <span role=\"img\" aria-label=\"trash\">\r\n          🛒\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"cart\">\r\n      <div className=\"close\" onClick={toggleCart}>\r\n        [close]\r\n      </div>\r\n      <h2>Shopping Cart</h2>\r\n      {state.cart.length ? (\r\n        <div>\r\n          {state.cart.map((item) => (\r\n            <CartItem key={item._id} item={item} />\r\n          ))}\r\n\r\n          <div className=\"flex-row space-between\">\r\n            <strong>Total: ${calculateTotal()}</strong>\r\n\r\n            {Auth.loggedIn() ? (\r\n              <button onClick={submitCheckout}>Checkout</button>\r\n            ) : (\r\n              <span>(log in to check out)</span>\r\n            )}\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <h3>\r\n          You haven't added anything to your cart yet!\r\n        </h3>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cart;\r\n","import React from \"react\";\r\nimport PartsList from \"../components/PartsList\";\r\nimport CategoryMenu from \"../components/CategoryMenu\";\r\nimport Cart from \"../components/Cart\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div className=\"splash-container\">\r\n      <CategoryMenu />\r\n      {/* <PartsList /> */}\r\n      <Cart />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { gql } from \"graphql-tag\";\r\n\r\nexport const LOGIN = gql`\r\n  mutation login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_USER = gql`\r\n  mutation addUser(\r\n    $firstName: String!\r\n    $lastName: String!\r\n    $email: String!\r\n    $password: String!\r\n  ) {\r\n    addUser(\r\n      firstName: $firstName\r\n      lastName: $lastName\r\n      email: $email\r\n      password: $password\r\n    ) {\r\n      token\r\n      user {\r\n        _id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_ORDER = gql`\r\n  mutation addOrder($parts: [ID]!) {\r\n    addOrder(prarts: $parts) {\r\n      purchaseDate\r\n      ts {\r\n        _id\r\n        name\r\n        description\r\n        price\r\n        quantity\r\n        category {\r\n          name\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React, { useState } from 'react';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { Link } from 'react-router-dom';\r\nimport { LOGIN } from '../utils/mutations';\r\nimport Auth from '../utils/auth';\r\n\r\nfunction Login(props) {\r\n  const [formState, setFormState] = useState({ email: '', password: '' });\r\n  const [login, { error }] = useMutation(LOGIN);\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      const mutationResponse = await login({\r\n        variables: { email: formState.email, password: formState.password },\r\n      });\r\n      const token = mutationResponse.data.login.token;\r\n      Auth.login(token);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"l-box-lrg pure-u-1 pure-u-md-3-5\">\r\n      <Link to=\"/signup\">← Go to Signup</Link>\r\n\r\n      <h2>Login</h2>\r\n      <form onSubmit={handleFormSubmit}>\r\n        <div className=\"pure-form pure-form-stacked\">\r\n          <label htmlFor=\"email\">Email address:</label>\r\n          <input\r\n            placeholder=\"youremail@test.com\"\r\n            name=\"email\"\r\n            type=\"email\"\r\n            id=\"email\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"pwd\">Password:</label>\r\n          <input\r\n            placeholder=\"******\"\r\n            name=\"password\"\r\n            type=\"password\"\r\n            id=\"pwd\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        {error ? (\r\n          <div>\r\n            <p className=\"error-text\">The provided credentials are incorrect</p>\r\n          </div>\r\n        ) : null}\r\n        <div className=\"flex-row flex-end\">\r\n          <button type=\"submit\" className=\"pure-button\">Submit</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport { useQuery } from '@apollo/react-hooks';\r\n\r\nimport Cart from '../components/Cart';\r\nimport {\r\n  REMOVE_FROM_CART,\r\n  UPDATE_CART_QUANTITY,\r\n  ADD_TO_CART,\r\n  UPDATE_PARTS,\r\n} from '../utils/actions';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { QUERY_PARTS} from '../utils/queries';\r\nimport { idbPromise } from '../utils/helpers';\r\nimport spinner from '../assets/spinner.gif';\r\n\r\nfunction Info() {\r\n  const state = useSelector(state => state);\r\n  const dispatch = useDispatch();\r\n  const { id } = useParams();\r\n\r\n  const [currentPart, setCurrentPart] = useState({});\r\n\r\n  const { loading, data } = useQuery(QUERY_PARTS);\r\n\r\n  const { parts, cart } = state;\r\n\r\n  useEffect(() => {\r\n    // already in global store\r\n    if (parts.length) {\r\n      setCurrentPart(parts.find((part) => part._id === id));\r\n    }\r\n    // retrieved from server\r\n    else if (data) {\r\n      dispatch({\r\n        type: UPDATE_PARTS,\r\n        parts: data.parts,\r\n      });\r\n\r\n      data.parts.forEach((part) => {\r\n        idbPromise('parts', 'put', part);\r\n      });\r\n    }\r\n    // get cache from idb\r\n    else if (!loading) {\r\n      idbPromise('parts', 'get').then((indexedParts) => {\r\n        dispatch({\r\n          type: UPDATE_PARTS,\r\n          parts: indexedParts,\r\n        });\r\n      });\r\n    }\r\n  }, [parts, data, loading, dispatch, id]);\r\n\r\n  const addToCart = () => {\r\n    const itemInCart = cart.find((cartItem) => cartItem._id === id);\r\n    if (itemInCart) {\r\n      dispatch({\r\n        type: UPDATE_CART_QUANTITY,\r\n        _id: id,\r\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\r\n      });\r\n      idbPromise('cart', 'put', {\r\n        ...itemInCart,\r\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: ADD_TO_CART,\r\n        part: { ...currentPart, purchaseQuantity: 1 },\r\n      });\r\n      idbPromise('cart', 'put', { ...currentPart, purchaseQuantity: 1 });\r\n    }\r\n  };\r\n\r\n  const removeFromCart = () => {\r\n    dispatch({\r\n      type: REMOVE_FROM_CART,\r\n      _id: currentPart._id,\r\n    });\r\n\r\n    idbPromise('cart', 'delete', { ...currentPart });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {currentPart && cart ? (\r\n        <div className=\"container my-1\">\r\n          <Link to=\"/\">← Back to Parts</Link>\r\n\r\n          <h2>{currentPart.name}</h2>\r\n\r\n          <p>{currentPart.description}</p>\r\n\r\n          <p>\r\n            <strong>Price:</strong>${currentPart.price}{' '}\r\n            <button onClick={addToCart}>Add to Cart</button>\r\n            <button\r\n              disabled={!cart.find((p) => p._id === currentPart._id)}\r\n              onClick={removeFromCart}\r\n            >\r\n              Remove from Cart\r\n            </button>\r\n          </p>\r\n\r\n          <img\r\n            src={`/images/${currentPart.image}`}\r\n            alt={currentPart.name}\r\n          />\r\n        </div>\r\n      ) : null}\r\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\r\n      <Cart />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Info;\r\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport Auth from '../utils/auth';\r\nimport { ADD_USER } from '../utils/mutations';\r\n\r\nfunction Signup(props) {\r\n  const [formState, setFormState] = useState({ email: '', password: '' });\r\n  const [addUser] = useMutation(ADD_USER);\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    const mutationResponse = await addUser({\r\n      variables: {\r\n        email: formState.email,\r\n        password: formState.password,\r\n        firstName: formState.firstName,\r\n        lastName: formState.lastName,\r\n      },\r\n    });\r\n    const token = mutationResponse.data.addUser.token;\r\n    Auth.login(token);\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"l-box-lrg pure-u-1 pure-u-md-3-5\">\r\n      <Link to=\"/login\">← Go to Login</Link>\r\n\r\n      <h2>Signup</h2>\r\n      <form onSubmit={handleFormSubmit}>\r\n        <div className=\"pure-form pure-form-stacked\">\r\n          <label htmlFor=\"firstName\">First Name:</label>\r\n          <input\r\n            placeholder=\"First\"\r\n            name=\"firstName\"\r\n            type=\"firstName\"\r\n            id=\"firstName\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"pure-form pure-form-stacked\">\r\n          <label htmlFor=\"lastName\">Last Name:</label>\r\n          <input\r\n            placeholder=\"Last\"\r\n            name=\"lastName\"\r\n            type=\"lastName\"\r\n            id=\"lastName\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"pure-form pure-form-stacked\">\r\n          <label htmlFor=\"email\">Email:</label>\r\n          <input\r\n            placeholder=\"youremail@test.com\"\r\n            name=\"email\"\r\n            type=\"email\"\r\n            id=\"email\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"pure-form pure-form-stacked\">\r\n          <label htmlFor=\"pwd\">Password:</label>\r\n          <input\r\n            placeholder=\"******\"\r\n            name=\"password\"\r\n            type=\"password\"\r\n            id=\"pwd\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"pure-form pure-form-stacked\">\r\n          <button type=\"submit\" className=\"pure-button\">Submit</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Signup;\r\n","import React from \"react\";\r\nimport Auth from \"../../utils/auth\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Nav() {\r\n\r\n  function showNavigation() {\r\n    if (Auth.loggedIn()) {\r\n      return (\r\n        <ul className=\"flex-row\">\r\n          <li className=\"mx-1\">\r\n            <Link to=\"/orderHistory\">\r\n              Browsing History \r\n            </Link>\r\n          </li>\r\n          <li className=\"mx-1\">\r\n            <a href=\"/\" onClick={() => Auth.logout()}>\r\n              Logout\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      );\r\n    } else {\r\n      return (\r\n        <ul className=\"flex-row\">\r\n          <li className=\"mx-1\">\r\n            <Link to=\"/signup\">\r\n              Signup\r\n            </Link>\r\n          </li>\r\n          <li className=\"mx-1\">\r\n            <Link to=\"/login\">\r\n              Login\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <header className=\"flex-row px-1\">\r\n      <h1>\r\n        <Link to=\"/\">\r\n          Parts R Us\r\n        </Link>\r\n      </h1>\r\n\r\n      <nav>\r\n        {showNavigation()}\r\n      </nav>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { QUERY_USER } from '../utils/queries';\r\n\r\nfunction OrderHistory() {\r\n  const { data } = useQuery(QUERY_USER);\r\n  let user;\r\n\r\n  if (data) {\r\n    user = data.user;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container my-1\">\r\n        <Link to=\"/\">← Back to Parts</Link>\r\n\r\n        {user ? (\r\n          <>\r\n            <h2>\r\n              Order History for {user.firstName} {user.lastName}\r\n            </h2>\r\n            {user.orders.map((order) => (\r\n              <div key={order._id} className=\"my-2\">\r\n                <h3>\r\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\r\n                </h3>\r\n                <div className=\"flex-row\">\r\n                  {order.parts.map(({ _id, image, name, price }, index) => (\r\n                    <div key={index} className=\"card px-1 py-1\">\r\n                      <Link to={`/ts/${_id}`}>\r\n                        <img alt={name} src={`/images/${image}`} />\r\n                        <p>{name}</p>\r\n                      </Link>\r\n                      <div>\r\n                        <span>${price}</span>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </>\r\n        ) : null}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default OrderHistory;\r\n","import {\r\n    UPDATE_PARTS,\r\n    ADD_TO_CART,\r\n    UPDATE_CART_QUANTITY,\r\n    REMOVE_FROM_CART,\r\n    ADD_MULTIPLE_TO_CART,\r\n    UPDATE_CATEGORIES,\r\n    UPDATE_CURRENT_CATEGORY,\r\n    CLEAR_CART,\r\n    TOGGLE_CART,\r\n  } from './actions';\r\n  \r\n  const initialState = {\r\n    parts: [],\r\n    cart: [],\r\n    cartOpen: false,\r\n    categories: [],\r\n    currentCategory: \"\",\r\n  };\r\n  // The reducer is a function that accepts the current state and an action. It returns a new state based on that action.\r\n  export const reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n      // Returns a copy of state with an update ts array. We use the action.ts property and spread it's contents into the new array.\r\n      case UPDATE_PARTS:\r\n        return {\r\n          ...state,\r\n          parts: [...action.parts],\r\n        };\r\n  \r\n      case ADD_TO_CART:\r\n        return {\r\n          ...state,\r\n          cartOpen: true,\r\n          cart: [...state.cart, action.part],\r\n        };\r\n      case ADD_MULTIPLE_TO_CART:\r\n        return {\r\n          ...state,\r\n          cart: [...state.cart, ...action.parts],\r\n        };\r\n      // Returns a copy of state, sets the cartOpen to true and maps through the items in the cart.\r\n      // If the item's `id` matches the `id` that was provided in the action.payload, we update the purchase quantity.\r\n      case UPDATE_CART_QUANTITY:\r\n        return {\r\n          ...state,\r\n          cartOpen: true,\r\n          cart: state.cart.map((part) => {\r\n            if (action._id === part._id) {\r\n              part.purchaseQuantity = action.purchaseQuantity;\r\n            }\r\n            return part;\r\n          }),\r\n        };\r\n  \r\n      // First we iterate through each item in the cart and check to see if the `t._id` matches the `action._id`\r\n      // If so, we remove it from our cart and set the updated state to a variable called `newState`\r\n      case REMOVE_FROM_CART:\r\n        let newState = state.cart.filter((part) => {\r\n          return part._id !== action._id;\r\n        });\r\n  \r\n        // Then we return a copy of state and check to see if the cart is empty.\r\n        // If not, we set the cartOpen status to  `true`. Then we return an updated cart array set to the value of `newState`.\r\n        return {\r\n          ...state,\r\n          cartOpen: newState.length > 0,\r\n          cart: newState,\r\n        };\r\n  \r\n      case CLEAR_CART:\r\n        return {\r\n          ...state,\r\n          cartOpen: false,\r\n          cart: [],\r\n        };\r\n  \r\n      case TOGGLE_CART:\r\n        return {\r\n          ...state,\r\n          cartOpen: !state.cartOpen,\r\n        };\r\n  \r\n      case UPDATE_CATEGORIES:\r\n        return {\r\n          ...state,\r\n          categories: [...action.categories],\r\n        };\r\n  \r\n      case UPDATE_CURRENT_CATEGORY:\r\n        return {\r\n          ...state,\r\n          currentCategory: action.currentCategory,\r\n        };\r\n  \r\n      // Return the state as is in the event that the `action.type` passed to our reducer was not accounted for by the developers\r\n      // This saves us from a crash.\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  \r\n  export default reducer;\r\n  ","import { createStore } from 'redux';\r\nimport reducer from './reducers';\r\n\r\nexport default createStore(reducer);","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport { ApolloProvider } from \"@apollo/react-hooks\";\r\nimport ApolloClient from \"apollo-boost\";\r\n\r\nimport Home from \"./pages/Home\";\r\nimport Login from \"./pages/Login\";\r\nimport Info from \"./pages/Info\";\r\nimport Signup from \"./pages/Signup\";\r\nimport Nav from \"./components/Nav\";\r\nimport OrderHistory from \"./pages/OrderHistory\";\r\n\r\nimport store from \"./utils/store\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nconst client = new ApolloClient({\r\n  request: (operation) => {\r\n    const token = localStorage.getItem(\"id_token\");\r\n    operation.setContext({\r\n      headers: {\r\n        authorization: token ? `Bearer ${token}` : \"\",\r\n      },\r\n    });\r\n  },\r\n  uri: \"/graphql\",\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Router>\r\n        <div>\r\n          <Provider store={store}>\r\n            <Nav />\r\n            <Switch>\r\n              <Route exact path=\"/\" component={Home} />\r\n              <Route exact path=\"/login\" component={Login} />\r\n              <Route exact path=\"/signup\" component={Signup} />\r\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\r\n              <Route exact path=\"/parts/:id\" component={Info} />\r\n            </Switch>\r\n          </Provider>\r\n        </div>\r\n      </Router>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.0/8 are considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport function register(config) {\r\n  if (\r\n    process.env.NODE_ENV === 'production' &&\r\n    'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nserviceWorker.register();\r\n"],"sourceRoot":""}